function [Y,Xf,Af] = NN_GR01(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 08-Mar-2016 18:04:22.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [2.98071428571429;0.759553327940363];
x1_step1_gain = [0.201805437935819;0.192739112968549];
x1_step1_ymin = -1;

% Layer 1
b1 = [-4.6110450924958251;-3.6080336031024793;2.4681212666867056;-1.2442346401459961;0.59576678213992296;0.30494571273017818;-2.1633662740061887;4.3796844219873963;4.5875557320995739;3.0280724140438018];
IW1_1 = [2.6109848966678597 4.1801420816314945;4.0319102400121629 -1.4829993994221973;-4.3581198482344066 -0.80991028537374954;1.3680208510167091 3.8490340007449468;1.524996170676185 -0.15042775507129127;-1.956760435941878 5.0597150267877415;-0.86117359994702747 -4.3134054886798818;3.1741910120152621 3.1736410445032379;5.3391239366669119 2.1754008812872869;2.6456959674708265 3.9132785543539321];

% Layer 2
b2 = -1.0114954731000652;
LW2_1 = [-1.0212888933439199 -0.11784533692501942 -0.1139152874036686 -0.054711841594996542 1.1182849721225179 0.30091011373641841 0.31228817305443735 -0.30725613943152158 0.22874454658981574 0.089484341921825306];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 0.363636363636364;
y1_step1_xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
